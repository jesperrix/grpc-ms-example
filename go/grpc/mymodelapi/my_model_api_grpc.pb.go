// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mymodelapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MyModelApiClient is the client API for MyModelApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyModelApiClient interface {
	// Get predictions from model
	Predict(ctx context.Context, in *MyModelInput, opts ...grpc.CallOption) (*MyModelOutput, error)
}

type myModelApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMyModelApiClient(cc grpc.ClientConnInterface) MyModelApiClient {
	return &myModelApiClient{cc}
}

func (c *myModelApiClient) Predict(ctx context.Context, in *MyModelInput, opts ...grpc.CallOption) (*MyModelOutput, error) {
	out := new(MyModelOutput)
	err := c.cc.Invoke(ctx, "/mymodelapi.MyModelApi/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyModelApiServer is the server API for MyModelApi service.
// All implementations must embed UnimplementedMyModelApiServer
// for forward compatibility
type MyModelApiServer interface {
	// Get predictions from model
	Predict(context.Context, *MyModelInput) (*MyModelOutput, error)
	mustEmbedUnimplementedMyModelApiServer()
}

// UnimplementedMyModelApiServer must be embedded to have forward compatible implementations.
type UnimplementedMyModelApiServer struct {
}

func (UnimplementedMyModelApiServer) Predict(context.Context, *MyModelInput) (*MyModelOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedMyModelApiServer) mustEmbedUnimplementedMyModelApiServer() {}

// UnsafeMyModelApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyModelApiServer will
// result in compilation errors.
type UnsafeMyModelApiServer interface {
	mustEmbedUnimplementedMyModelApiServer()
}

func RegisterMyModelApiServer(s grpc.ServiceRegistrar, srv MyModelApiServer) {
	s.RegisterService(&_MyModelApi_serviceDesc, srv)
}

func _MyModelApi_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyModelInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyModelApiServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mymodelapi.MyModelApi/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyModelApiServer).Predict(ctx, req.(*MyModelInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyModelApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mymodelapi.MyModelApi",
	HandlerType: (*MyModelApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _MyModelApi_Predict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "my_model_api.proto",
}
